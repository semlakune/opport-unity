datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Replace with your actual environment variable
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int              @id @default(autoincrement())
  username       String           @unique
  password       String
  name           String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  appliedJobs    JobApplication[]
  bookmarkedJobs JobBookmark[]
  profile        UserProfile?
  employer       Employer?
  userType       UserType         @default(USER)
  employerId     Int?
}

enum UserType {
  USER
  EMPLOYER
}

model Employer {
  id          Int      @id @default(autoincrement())
  companyInfo String?
  logo        String?
  jobsPosted  Job[]
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  jobs  Job[]
}

model Job {
  id                Int              @id @default(autoincrement())
  title             String
  description       String
  location          String
  salaryRange       String?
  level             JobLevel         @default(ENTRY_LEVEL)
  type              JobType          @default(FULL_TIME)
  workModel         WorkModel        @default(REMOTE)
  category          Category         @relation(fields: [categoryId], references: [id])
  categoryId        Int
  qualifications    String[]
  responsibilities  String[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  employer          Employer         @relation(fields: [employerId], references: [id])
  employerId        Int
  applications      JobApplication[]
  bookmarks         JobBookmark[]
  status            JobStatus        @default(OPEN)
}

enum JobLevel {
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum WorkModel {
  REMOTE
  ON_SITE
  HYBRID
}

enum JobStatus {
  OPEN
  CLOSED
}

model JobApplication {
  id         Int         @id @default(autoincrement())
  job        Job         @relation(fields: [jobId], references: [id])
  jobId      Int
  user       User        @relation(fields: [userId], references: [id])
  userId     Int
  status     ApplicationStatus @default(PENDING)
  createdAt  DateTime    @default(now())
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model JobBookmark {
  id         Int      @id @default(autoincrement())
  job        Job      @relation(fields: [jobId], references: [id])
  jobId      Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  createdAt  DateTime @default(now())
}

model UserProfile {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int      @unique
  bio      String?
  resume   String?
  skills   String[]
  photo    String?
}
