datasource db {
  provider = "postgresql" // or another database provider
  url      = env("POSTGRES_PRISMA_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Define the User model with common fields
model User {
  id             Int           @id @default(autoincrement())
  username       String        @unique
  password       String
  name           String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  appliedJobs    JobApplication[]
  bookmarkedJobs JobBookmark[]
  profile        UserProfile?
  employer       Employer?

  // Discriminator field to identify the type of user
  userType       UserType      @default(USER)
}

// Enum to distinguish user types
enum UserType {
  USER
  EMPLOYER
}

// Define the Employer model
model Employer {
  id          Int      @id @default(autoincrement())
  userId      Int @unique
  companyInfo String
  logo String?
  jobsPosted  Job[]

  // Connect the Employer with the User record
  // The relation is explicitly named and connected to User
  user        User     @relation(fields: [userId], references: [id])
}

// Define the Job model
model Job {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  location    String
  salaryRange String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employerId      Int
  employer        Employer @relation(fields: [employerId], references: [id])
  applications    JobApplication[]
  bookmarks       JobBookmark[]
}

// Define the JobApplication model for users applying for jobs
model JobApplication {
  id       Int      @id @default(autoincrement())
  jobId    Int
  userId   Int
  status   ApplicationStatus @default(PENDING)
  createdAt DateTime @default(now())

  // Relations
  job      Job   @relation(fields: [jobId], references: [id])
  user     User  @relation(fields: [userId], references: [id])
}

// Enum for application status
enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// Define the JobBookmark model for users bookmarking jobs
model JobBookmark {
  id       Int      @id @default(autoincrement())
  jobId    Int
  userId   Int
  createdAt DateTime @default(now())

  // Relations
  job      Job   @relation(fields: [jobId], references: [id])
  user     User  @relation(fields: [userId], references: [id])
}

// Define the UserProfile model for additional user information
model UserProfile {
  id       Int      @id @default(autoincrement())
  userId   Int @unique
  bio      String?
  resume   String?
  skills   String[]


  // Connect the UserProfile with the User record
  user     User   @relation(fields: [userId], references: [id])
}
