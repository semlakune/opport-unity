datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  username       String           @unique
  password       String
  name           String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  appliedJobs    JobApplication[]
  bookmarkedJobs JobBookmark[]
  profile        UserProfile?
  employer       Employer?
  userType       UserType         @default(USER)
}

enum UserType {
  USER
  EMPLOYER
}

model Employer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  companyInfo String
  logo        String?
  jobsPosted  Job[]
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique @db.ObjectId
}

enum WorkModel {
  REMOTE
  ON_SITE
  HYBRID
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum JobLevel {
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
}

model Job {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  location          String
  salaryRange       String
  level             JobLevel        @default(ENTRY_LEVEL)
  type              JobType         @default(FULL_TIME)
  workModel         WorkModel       @default(REMOTE)
  qualifications    String[]
  responsibilities  String[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  employerId        String           @db.ObjectId
  employer          Employer         @relation(fields: [employerId], references: [id])
  applications      JobApplication[]
  bookmarks         JobBookmark[]
}

model JobApplication {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  jobId      String       @db.ObjectId
  userId     String       @db.ObjectId
  status     ApplicationStatus @default(PENDING)
  createdAt  DateTime     @default(now())
  job        Job          @relation(fields: [jobId], references: [id])
  user       User         @relation(fields: [userId], references: [id])
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model JobBookmark {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  jobId      String   @db.ObjectId
  userId     String   @db.ObjectId
  createdAt  DateTime @default(now())
  job        Job      @relation(fields: [jobId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model UserProfile {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @unique @db.ObjectId
  bio      String?
  resume   String?
  skills   String[]
  photo    String?
  user     User     @relation(fields: [userId], references: [id])
}
